PSIS_LOO(model_sep, model_name = "Seperated model")
PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LH <- extract_log_lik(model, parameter_name=parameter_name)
model_loo <- loo(extracted_LH)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
k_below_07, k_above_07)
#names(results) <- c("elpd_loo", "SE", "No. k_hat <= 0.7", "No. k_hat > 0.7" )
plot(model_loo, main=model_name)
return(results)
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
return(t(results))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LH <- extract_log_lik(model, parameter_name=parameter_name)
model_loo <- loo(extracted_LH)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
#names(results) <- c("elpd_loo", "SE", "No. k_hat <= 0.7", "No. k_hat > 0.7" )
plot(model_loo, main=model_name)
return(results)
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
model_results
xtable(model_results)
View(model_results)
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- as.dataframe(mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE))
par(mfrow=c(1,1))
colnames(results) <- model_names
return(t(results))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- as.data.frame(mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE))
par(mfrow=c(1,1))
colnames(results) <- model_names
return(t(results))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
View(model_results)
as.data.frame(model_results)
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
results <- as.data.frame(results)
return(t(results))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
debugonce(PSIS_LOO_multi_wrapper)
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
results
results
remove(model_results)
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
results <- as.data.frame(results)
return(t(results))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
results_df <- as.data.frame(results)
return(t(results_df))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
rownames(results)[c(3,4)] <- c("No. k <=07", "No. k > 07")
results_df <- as.data.frame(results)
return(t(results_df))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
rownames(results)[c(3,4)] <- c("No. k <=0.7", "No. k > 0.7")
results_df <- as.data.frame(results)
return(t(results_df))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
xtable(model_results)
sep_loo <- loo(seperated_log_lik, r_eff= r_eff_seperated)
sep_loo$estimates
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LH <- extract_log_lik(model, parameter_name=parameter_name)
model_loo <- loo(extracted_LH)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
return(results)
}
plot(sep_loo)
r_eff_seperated
sep_loo
sep_loo$summaru
relative_eff(seperated_log_lik)
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name, merge_chains = FALSE)
r_eff <- relative_eff(exp(extracted_LLH))
model_loo <- loo(extracted_LH)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
return(results)
}
PSIS_LOO(model_sep, model_name = "seperated")
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name, merge_chains = FALSE)
r_eff <- relative_eff(exp(extracted_LLH))
model_loo <- loo(extracted_LLH, r_eff= r_eff)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
return(results)
}
PSIS_LOO(model_sep, model_name = "seperated")
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name,
merge_chains = FALSE)
#setting merge_chains = FALSE to return an array which is easier to use with
#relative_eff
r_eff <- relative_eff(exp(extracted_LLH))
model_loo <- loo(extracted_LLH, r_eff= r_eff)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
cat("Iteration for ", model_name, "is done!")
return(results)
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
?cat
model_results
model_sep$`log_lik[30]`
elpd(seperated_log_lik)
-118-(-139)
sep_loo
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
rstan:::rstudio_stanc("seperated.stan")
sm_sep <- rstan::stan_model(file = "seperated.stan")
#due to how the stan code is defined: the sigma_distribution type is 1 for
# inverse chi square or 2 for beta distribution.
#only the beta distribution requires two parameters, and the inverse-chi square
#only uses sigma_param1, but i still need to specify sigma_param2 to get it to work.
model_sep <- rstan::sampling(sm_sep, data = stan_data_sep, seed=1337)
print(summarise_draws(model_sep), n = 50)
elpd(seperated_log_lik)
mean(seperated_log_lik)
extract_variable_matrix(model_sep, variable = "lppd")
rstan:::rstudio_stanc("seperated.stan")
sm_hier <- rstan:: stan_model(file = "hierarchical.stan")
sm_sep <- rstan::stan_model(file = "seperated.stan")
#due to how the stan code is defined: the sigma_distribution type is 1 for
# inverse chi square or 2 for beta distribution.
#only the beta distribution requires two parameters, and the inverse-chi square
#only uses sigma_param1, but i still need to specify sigma_param2 to get it to work.
model_sep <- rstan::sampling(sm_sep, data = stan_data_sep, seed=1337)
print(summarise_draws(model_sep), n = 50)
elpd(seperated_log_lik)
sep_loo$estimates
-137.5 + 139
-117.5 + 138
rstan:::rstudio_stanc("seperated.stan")
#Libraries
library(tidyverse)
library(xtable)
library(bsda)
library(posterior)
library(loo)
library(rstan)
options(mc.cores = parallel::detectCores())
data("factory")
sm_sep <- rstan::stan_model(file = "seperated.stan")
stan_data_sep <- list( y = factory, N = nrow(factory) , J = ncol(factory),
mu_sigma = 135, sigma_distribution_type=1,
sigma_param1=10, sigma_param2=0)
#due to how the stan code is defined: the sigma_distribution type is 1 for
# inverse chi square or 2 for beta distribution.
#only the beta distribution requires two parameters, and the inverse-chi square
#only uses sigma_param1, but i still need to specify sigma_param2 to get it to work.
model_sep <- rstan::sampling(sm_sep, data = stan_data_sep, seed=1337)
print(summarise_draws(model_sep), n = 50)
sm_pool <- rstan::stan_model(file = "pooled.stan")
factory_vector <- as.vector(unlist(factory)) #due to how stan-code is working,
#the data required is a vector of all the observations
stan_data_pool <- list( y = factory_vector, N = 30, mu_sigma = 135,
sigma_distribution_type= 1,
sigma_param1 = 10, sigma_param2=0)
model_pool <- rstan::sampling(sm_pool, data = stan_data_pool, seed=1337)
summarise_draws(model_pool)
sm_hier <- rstan:: stan_model(file = "hierarchical.stan")
stan_data_hier <- list( y = factory, N = nrow(factory) , J = ncol(factory),
mu_sigma=135, sigma_distribution_type = 1,
sigma_param1=10, sigma_param2=0)
model_hier <- rstan::sampling(sm_hier, data = stan_data_hier, seed=1337)
#just as before, sigma_distribution_type=1 corresponds to inv_chi_square,
#with sigma_param_1=10 as value, sigma_param_2 not used here.
print(summarise_draws(model_hier), n=50)
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name,
merge_chains = FALSE)
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name,
merge_chains = FALSE)
#setting merge_chains = FALSE to return an array which is easier to use with
#relative_eff
r_eff <- relative_eff(exp(extracted_LLH))
model_loo <- loo(extracted_LLH, r_eff= r_eff)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
cat("Iteration for ", model_name, "is done!", fill=TRUE)
return(results)
}
PSIS_LOO_multi_wrapper <- function (models,
parameter_names,
model_names){
par(mfrow=c(3,1))
results <- mapply(FUN=PSIS_LOO, model=models,
parameter_name = parameter_names,
model_name = model_names, SIMPLIFY = TRUE)
par(mfrow=c(1,1))
colnames(results) <- model_names
rownames(results)[c(3,4)] <- c("No. k <=0.7", "No. k > 0.7")
results_df <- as.data.frame(results)
return(t(results_df))
}
model_results <- PSIS_LOO_multi_wrapper(models = c(model_sep, model_pool, model_hier),
parameter_names = list("log_lik"),
model_names = c("Seperated_model", "Pooled model",
"Hierarchical model"))
model_results
seperated_loo_res <- PSIS_LOO(model_sep, model_name = "seperated")
effective_params <- function(model, model_name, elpd_loo){
LL_matrix <- extract_log_lik(model)
lppd <- elpd(LL_matrix)
eff_p <- lppd - elpd_loo
names(eff_p) <- model_name
return(eff_p)
}
seperated_loo_res
effective_params(model= model_sep, model_name = seperated_model, elpd_loo = -138.95)
effective_params <- function(model, model_name, elpd_loo, parameter_name= "log_lik"){
LL_matrix <- extract_log_lik(model, parameter_name = parameter_name)
lppd <- elpd(LL_matrix)
eff_p <- lppd - elpd_loo
names(eff_p) <- model_name
return(eff_p)
}
effective_params(model= model_sep, model_name = seperated_model, elpd_loo = -138.95)
debugonce(effective_params)
effective_params(model= model_sep, model_name = seperated_model, elpd_loo = -138.95)
View(lppd)
lppd
lppd$estimates
lppd[1]
lppd[[1]]
lppd$estimates[1]
effective_params <- function(model, model_name, elpd_loo, parameter_name= "log_lik"){
LL_matrix <- extract_log_lik(model, parameter_name = parameter_name)
lppd <- elpd(LL_matrix)$estimates[1]
eff_p <- lppd - elpd_loo
names(eff_p) <- model_name
return(eff_p)
}
effective_params(model= model_sep, model_name = seperated_model, elpd_loo = -138.95)
effective_params(model= model_sep, model_name = "seperated_model", elpd_loo = -138.95)
test_LHH <- extract_log_lik(model_sep, parameter_name = "log_lik")
test_LHH <- extract_log_lik(model_sep, parameter_name = "log_lik", merge_chains = FALSE)
#setting merge_chains = FALSE to return an array which is easier to use with
#relative_eff
test_r_eff <- relative_eff(exp(test_LHH))
test_model_loo <- loo(test_LHH, r_eff= test_r_eff)
test_model_loo
effective_params_multi <- function(models, model_names, elpd_loos,
parameter_names = list("log_lik")){
results <- mapply(FUN=effective_params, model=models,
model_name = model_names,
parameter_names=parameter_names,
elpd_loo = elpd_loos, SIMPLIFY = FALSE)
return(results)
}
model_results
model_results[,1]
unlist(model_results[,1])
effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1])
}
effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1]))
effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1]),
parameter_names = list("log_lik"))
effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1]))
effective_params_multi <- function(models, model_names, elpd_loos,
parameter_names = list("log_lik")){
results <- mapply(FUN=effective_params, model=models,
model_name = model_names,
parameter_name=parameter_names,
elpd_loo = elpd_loos, SIMPLIFY = FALSE)
return(results)
}
effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1]))
eff_p <- effective_params_multi(models = c(model_sep, model_pool, model_hier),
model_names = c("Seperated Model",
"Pooled Model",
"Hierarchical Model"),
elpd_loos = unlist(model_results[,1]))
print(eff_p)
test_LHH <- extract_log_lik(model_hier, parameter_name = "log_lik", merge_chains = FALSE)
#setting merge_chains = FALSE to return an array which is easier to use with
#relative_eff
test_r_eff <- relative_eff(exp(test_LHH))
test_model_loo <- loo(test_LHH, r_eff= test_r_eff)
test_model_loo
setwd("C:/Users/henry/OneDrive/Bayesian Statistics/Project")
## importing data
data("Seatbelts")
library(posterior)
library(xtable)
library(tidyverse)
library(forecast)
forecast::ggtsdisplay(Seatbelts[,"DriversKilled"])
# using all cores for stan
options(mc.cores = parallel::detectCores())
# standardizing kms for easier model fit
kms_std <- (Seatbelts[,"kms"] / 1000)
# saving data in stan-format
stan_data <- list(
y = Seatbelts[,"DriversKilled"], # number of driver deaths each month
T = nrow(Seatbelts), # number of observations
law = Seatbelts[,"law"], # binary law variable of interest
kms = kms_std, # standardized kms
time = seq(1:192) # monthly index for trend component
)
# fitting poisson model
poisson_model <- rstan::stan_model(file = "./poisson_model.stan")
poisson_fit <- rstan::sampling(poisson_model, data = stan_data,
iter = 2000, seed = 1402)
PSIS_LOO <- function(model, parameter_name = "log_lik", model_name){
extracted_LLH <- extract_log_lik(model, parameter_name=parameter_name,
merge_chains = FALSE)
#setting merge_chains = FALSE to return an array which is easier to use with
#relative_eff
r_eff <- relative_eff(exp(extracted_LLH))
model_loo <- loo(extracted_LLH, r_eff= r_eff)
elpd_vals <- round(model_loo$estimates[1,], digits=2)
k_below_07 <- length(which(model_loo$diagnostics$pareto_k <=0.7))
k_above_07 <- length(which(model_loo$diagnostics$pareto_k > 0.7))
results <- data.frame("elpd_loo" = elpd_vals[1], "SE" = elpd_vals[2],
"No. k <=07" = k_below_07, "No. k > 0.7" = k_above_07)
plot(model_loo, main=model_name)
cat("Iteration for ", model_name, "is done!", fill=TRUE)
res_list<- list("loo_res" = model_loo, "elpd_res" = results)
return(results)
}
poisson_fit
poisson_loglik = extract_log_lik(fit_poisson, parameter_name = "loglik")
poisson_loglik = extract_log_lik(poisson_fit, parameter_name = "loglik")
poisson_loglik = poisson_loglik[,-c(1:12)]
r_eff_poisson <- relative_eff(exp(poisson_loglik), chain_id = rep(1:4, each= 1000))
poisson_loo = loo(poisson_loglik, r_eff = r_eff_poisson)
poisson_loo
